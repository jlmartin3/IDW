t <- sapply(2011:2012, function(x)
isd(st_FL$usaf[63], st_FL$wban[63], year = x) )
View(t)
View(t[[2]])
t <- sapply(2012:2019, function(x)
isd(st_FL$usaf[63], st_FL$wban[63], year = x) )
t <- sapply(2012:2019, function(x)
isd(st_FL$usaf[63], st_FL$wban[63], year = x,
parallel = TRUE, cleanup = TRUE
) )
t <- sapply(2012:2019, function(x)
isd(st_FL$usaf[63], st_FL$wban[63], year = x,
parallel = TRUE, cleanup = TRUE
) )
t <- sapply(2012:2019, function(x)
isd(st_FL$usaf[63], st_FL$wban[63], year = x,
parallel = TRUE, cores = 4, cleanup = TRUE
) )
View(t)
t <- do.call(t, rbind)
t <- do.call(rbind, t)
View(t)
View(t[[1]])
require(rgdal)
require(rgeos)
require(maptools)
par(mar=c(0,0,0,0))
setwd("C:/Users/James/Documents/R/air")
zip  <- readOGR( # read in zip code shp
"data_R/tl_2019_us_zcta510/tl_2019_us_zcta510.shp")
zip <- readOGR("data_R/ZIPs/FL_ZIPs.shp")
View(zip)
View(zip@data)
gArea(zip[1,])
zip <- readOGR("data_R/ZIPs/FL_ZIPs_UTM.shp")
gArea(zip[1,])
sapply(1:nrow(zip), function(x) gArea(zip[x,]))
min(sapply(1:nrow(zip), function(x) gArea(zip[x,])))
min(sapply(1:nrow(zip), function(x) gArea(zip[x,])))/1000
zip@data$area <- sapply(1:nrow(zip), function(x) gArea(zip[x,])))
zip@data$area <- sapply(1:nrow(zip), function(x) gArea(zip[x,]))
View(zip@data
)
zip@data$area*10^-6
zip@data$area <- sapply(1:nrow(zip), function(x) gArea(zip[x,]))
zip@area$area <- zip@data$area*10^-6
View(zip@data)
zip@data$area <- sapply(1:nrow(zip), function(x) gArea(zip[x,]))
zip@data$area <- zip@data$area*10^-6
View(zip@data)
?Extract
require(raster)
?extract
?gCentroid
source('~/R/air/IDW/idw_cpp_parallel.R')
for(i in 1:nrow(zip)){ # for each zip code
# get the values of the zip code using msk
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
if(length(zip_vals) > 0){ # if there are pixels in the zip code
zip_means[i] <- mean(zip_vals, na.rm = TRUE)   # mean the values
# number of pixels in the zip code with values
zip_mons[i]  <- length(which(!is.na(zip_vals)))
}else{ # if no pixels fall in the zip code due to its size
# extract the value of the pixel closest to the zip centroid
zip_means[i] <- extract(plot_int, gCentroid(zip[i,]))
zip_mons[i]  <- 1 # only one pixel used
}
}
# loop through IDW
clusterEvalQ(cl,
for(h in (chunk_breaks[i]+1):chunk_breaks[i+1]){
# get pm2.5 values at available monitors
vals_h <- vals[,h][!is.na(vals[,h])]
# get coordinates of avaiable monitors
pm_x <- pm2.5_sites$lon_utm[!is.na(vals[,h])]
pm_y <- pm2.5_sites$lat_utm[!is.na(vals[,h])]
# run IDW using c++ function
int <- Daily_IDW(ras_x = ras_x, ras_y = ras_y,
pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
plot_int <- msk # create copy of msk to make new raster
# insert predicted pm2.5 values from IDW
plot_int@data@values[!is.na(plot_int@data@values)] <- int
# plotting
png(paste0("plots_idw/idw_ccp",h,".png"),
width = 1000, height = 771, res = 180)
par(mar=c(0,0,0,0)) # no margins
cuts = seq(0,40,1) #set breaks and make pallete
pal <- colorRampPalette(c("darkgreen","yellow","red"))
plot(plot_int, breaks=cuts, col = pal(length(cuts)))
points(pm_x, pm_y, lwd = 2) # add monitor locations
text(100000,3100000,  datez[h], cex = 1.5 ) # add date
dev.off()
zip_means <- c() # vector for mean pm2.5 values
zip_mons  <- c() # vector for number of pixels
# 7 zip codes are too small to have pixels within their boundaries
# 32463 32447 33128 33101 34679 34268 33856
# for these get the nearest pixel
for(i in 1:nrow(zip)){ # for each zip code
# get the values of the zip code using msk
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
if(length(zip_vals) > 0){ # if there are pixels in the zip code
zip_means[i] <- mean(zip_vals, na.rm = TRUE)   # mean the values
# number of pixels in the zip code with values
zip_mons[i]  <- length(which(!is.na(zip_vals)))
}else{ # if no pixels fall in the zip code due to its size
# extract the value of the pixel closest to the zip centroid
zip_means[i] <- extract(plot_int, gCentroid(zip[i,]))
zip_mons[i]  <- 1 # only one pixel used
}
}
zip_int[h,]    <- zip_means # write mean pm2.5 predictions
zip_int_mon[h,] <- zip_mons # number of pixels
# calculate root mean square error for the day
#    using leave-one-out cross validation
rmse[h] <- Daily_RMSE(pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
rmse_n[h] <- length(vals_h)
}
)
# loop through IDW
clusterEvalQ(cl,
for(h in (chunk_breaks[i]+1):chunk_breaks[i+1]){
# get pm2.5 values at available monitors
vals_h <- vals[,h][!is.na(vals[,h])]
# get coordinates of avaiable monitors
pm_x <- pm2.5_sites$lon_utm[!is.na(vals[,h])]
pm_y <- pm2.5_sites$lat_utm[!is.na(vals[,h])]
# run IDW using c++ function
int <- Daily_IDW(ras_x = ras_x, ras_y = ras_y,
pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
plot_int <- msk # create copy of msk to make new raster
# insert predicted pm2.5 values from IDW
plot_int@data@values[!is.na(plot_int@data@values)] <- int
# plotting
png(paste0("plots_idw/idw_ccp",h,".png"),
width = 1000, height = 771, res = 180)
par(mar=c(0,0,0,0)) # no margins
cuts = seq(0,40,1) #set breaks and make pallete
pal <- colorRampPalette(c("darkgreen","yellow","red"))
plot(plot_int, breaks=cuts, col = pal(length(cuts)))
points(pm_x, pm_y, lwd = 2) # add monitor locations
text(100000,3100000,  datez[h], cex = 1.5 ) # add date
dev.off()
zip_means <- c() # vector for mean pm2.5 values
zip_mons  <- c() # vector for number of pixels
# 7 zip codes are too small to have pixels within their boundaries
# 32463 32447 33128 33101 34679 34268 33856
# for these get the nearest pixel
for(i in 1:nrow(zip)){ # for each zip code
# get the values of the zip code using msk
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
if(is.na(zip_vals)){ # if there are pixels in the zip code
zip_means[i] <- mean(zip_vals, na.rm = TRUE)   # mean the values
# number of pixels in the zip code with values
zip_mons[i]  <- length(which(!is.na(zip_vals)))
}else{ # if no pixels fall in the zip code due to its size
# extract the value of the pixel closest to the zip centroid
zip_means[i] <- extract(plot_int, gCentroid(zip[i,]))
zip_mons[i]  <- 1 # only one pixel used
}
}
zip_int[h,]    <- zip_means # write mean pm2.5 predictions
zip_int_mon[h,] <- zip_mons # number of pixels
# calculate root mean square error for the day
#    using leave-one-out cross validation
rmse[h] <- Daily_RMSE(pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
rmse_n[h] <- length(vals_h)
}
)
clusterEvalQ(cl, zip_vals)
clusterEvalQ(cl, length(zip_vals))
# loop through IDW
clusterEvalQ(cl,
for(h in (chunk_breaks[i]+1):chunk_breaks[i+1]){
# get pm2.5 values at available monitors
vals_h <- vals[,h][!is.na(vals[,h])]
# get coordinates of avaiable monitors
pm_x <- pm2.5_sites$lon_utm[!is.na(vals[,h])]
pm_y <- pm2.5_sites$lat_utm[!is.na(vals[,h])]
# run IDW using c++ function
int <- Daily_IDW(ras_x = ras_x, ras_y = ras_y,
pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
plot_int <- msk # create copy of msk to make new raster
# insert predicted pm2.5 values from IDW
plot_int@data@values[!is.na(plot_int@data@values)] <- int
# plotting
png(paste0("plots_idw/idw_ccp",h,".png"),
width = 1000, height = 771, res = 180)
par(mar=c(0,0,0,0)) # no margins
cuts = seq(0,40,1) #set breaks and make pallete
pal <- colorRampPalette(c("darkgreen","yellow","red"))
plot(plot_int, breaks=cuts, col = pal(length(cuts)))
points(pm_x, pm_y, lwd = 2) # add monitor locations
text(100000,3100000,  datez[h], cex = 1.5 ) # add date
dev.off()
zip_means <- c() # vector for mean pm2.5 values
zip_mons  <- c() # vector for number of pixels
# 7 zip codes are too small to have pixels within their boundaries
# 32463 32447 33128 33101 34679 34268 33856
# for these get the nearest pixel
for(i in 1:nrow(zip)){ # for each zip code
# get the values of the zip code using msk
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
if(length(zip_vals) = 0){ # if there are pixels in the zip code
zip_means[i] <- mean(zip_vals, na.rm = TRUE)   # mean the values
# number of pixels in the zip code with values
zip_mons[i]  <- length(which(!is.na(zip_vals)))
}else{ # if no pixels fall in the zip code due to its size
# extract the value of the pixel closest to the zip centroid
zip_means[i] <- extract(plot_int, gCentroid(zip[i,]))
zip_mons[i]  <- 1 # only one pixel used
}
}
zip_int[h,]    <- zip_means # write mean pm2.5 predictions
zip_int_mon[h,] <- zip_mons # number of pixels
# calculate root mean square error for the day
#    using leave-one-out cross validation
rmse[h] <- Daily_RMSE(pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
rmse_n[h] <- length(vals_h)
}
)
# Calculate the number of cores
no_cores <- detectCores()
# Initiate cluster of sessions
cl <- makeCluster(no_cores)
# get break values to split IDW loop into equal parts
chunk_breaks   <- c(0,   sapply(1: length(cl), function(x)
round((length(datez)/length(cl))*x)) )
# load packages into the sessions
clusterEvalQ(cl, getwd())
clusterEvalQ(cl, require(maptools))
clusterEvalQ(cl, require(rgdal))
clusterEvalQ(cl, require(rgeos))
clusterEvalQ(cl, require(raster))
clusterEvalQ(cl, require(gstat))
clusterEvalQ(cl, require(RColorBrewer))
clusterEvalQ(cl, require(Rcpp))
clusterEvalQ(cl, require(parallel))
clusterEvalQ(cl, require(IDW))
# load the prevously saved workspace into the sessions
clusterEvalQ(cl, load("IDW/parallel_temp.RData"))
# make sure "i" in each session is equal to the session number
for(i in 1:length(cl)){clusterExport(cl[i], list("i"))}
# export break values to sessions
for(i in 1:length(cl)){clusterExport(cl[i], list("chunk_breaks"))}
clusterEvalQ(cl,
for(h in (chunk_breaks[i]+1):chunk_breaks[i+1]){
# get pm2.5 values at available monitors
vals_h <- vals[,h][!is.na(vals[,h])]
# get coordinates of avaiable monitors
pm_x <- pm2.5_sites$lon_utm[!is.na(vals[,h])]
pm_y <- pm2.5_sites$lat_utm[!is.na(vals[,h])]
# run IDW using c++ function
int <- Daily_IDW(ras_x = ras_x, ras_y = ras_y,
pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
plot_int <- msk # create copy of msk to make new raster
# insert predicted pm2.5 values from IDW
plot_int@data@values[!is.na(plot_int@data@values)] <- int
# plotting
png(paste0("plots_idw/idw_ccp",h,".png"),
width = 1000, height = 771, res = 180)
par(mar=c(0,0,0,0)) # no margins
cuts = seq(0,40,1) #set breaks and make pallete
pal <- colorRampPalette(c("darkgreen","yellow","red"))
plot(plot_int, breaks=cuts, col = pal(length(cuts)))
points(pm_x, pm_y, lwd = 2) # add monitor locations
text(100000,3100000,  datez[h], cex = 1.5 ) # add date
dev.off()
zip_means <- c() # vector for mean pm2.5 values
zip_mons  <- c() # vector for number of pixels
# 7 zip codes are too small to have pixels within their boundaries
# 32463 32447 33128 33101 34679 34268 33856
# for these get the nearest pixel
for(i in 1:nrow(zip)){ # for each zip code
# get the values of the zip code using msk
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
if(length(zip_vals) = 0){ # if there are pixels in the zip code
zip_means[i] <- mean(zip_vals, na.rm = TRUE)   # mean the values
# number of pixels in the zip code with values
zip_mons[i]  <- length(which(!is.na(zip_vals)))
}else{ # if no pixels fall in the zip code due to its size
# extract the value of the pixel closest to the zip centroid
zip_means[i] <- extract(plot_int, gCentroid(zip[i,]))
zip_mons[i]  <- 1 # only one pixel used
}
}
zip_int[h,]    <- zip_means # write mean pm2.5 predictions
zip_int_mon[h,] <- zip_mons # number of pixels
# calculate root mean square error for the day
#    using leave-one-out cross validation
rmse[h] <- Daily_RMSE(pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
rmse_n[h] <- length(vals_h)
}
)
# loop through IDW
clusterEvalQ(cl,
for(h in (chunk_breaks[i]+1):chunk_breaks[i+1]){
# get pm2.5 values at available monitors
vals_h <- vals[,h][!is.na(vals[,h])]
# get coordinates of avaiable monitors
pm_x <- pm2.5_sites$lon_utm[!is.na(vals[,h])]
pm_y <- pm2.5_sites$lat_utm[!is.na(vals[,h])]
# run IDW using c++ function
int <- Daily_IDW(ras_x = ras_x, ras_y = ras_y,
pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
plot_int <- msk # create copy of msk to make new raster
# insert predicted pm2.5 values from IDW
plot_int@data@values[!is.na(plot_int@data@values)] <- int
# plotting
png(paste0("plots_idw/idw_ccp",h,".png"),
width = 1000, height = 771, res = 180)
par(mar=c(0,0,0,0)) # no margins
cuts = seq(0,40,1) #set breaks and make pallete
pal <- colorRampPalette(c("darkgreen","yellow","red"))
plot(plot_int, breaks=cuts, col = pal(length(cuts)))
points(pm_x, pm_y, lwd = 2) # add monitor locations
text(100000,3100000,  datez[h], cex = 1.5 ) # add date
dev.off()
zip_means <- c() # vector for mean pm2.5 values
zip_mons  <- c() # vector for number of pixels
# 7 zip codes are too small to have pixels within their boundaries
# 32463 32447 33128 33101 34679 34268 33856
# for these get the nearest pixel
for(i in 1:nrow(zip)){ # for each zip code
# get the values of the zip code using msk
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
if(length(zip_vals) == 0){ # if there are pixels in the zip code
zip_means[i] <- mean(zip_vals, na.rm = TRUE)   # mean the values
# number of pixels in the zip code with values
zip_mons[i]  <- length(which(!is.na(zip_vals)))
}else{ # if no pixels fall in the zip code due to its size
# extract the value of the pixel closest to the zip centroid
zip_means[i] <- extract(plot_int, gCentroid(zip[i,]))
zip_mons[i]  <- 1 # only one pixel used
}
}
zip_int[h,]    <- zip_means # write mean pm2.5 predictions
zip_int_mon[h,] <- zip_mons # number of pixels
# calculate root mean square error for the day
#    using leave-one-out cross validation
rmse[h] <- Daily_RMSE(pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
rmse_n[h] <- length(vals_h)
}
)
########### create data frame and export ###########
# import results
zip_int_comb     <- clusterEvalQ(cl, zip_int)
zip_int_mon_comb <- clusterEvalQ(cl, zip_int_mon)
for(i in 1:length(zip_int_comb)){ # for each session's result
zip_int_comb[[i]]   <- zip_int_comb[[i]][
# exclude NAs based on break values
(chunk_breaks[i]+1):chunk_breaks[i+1],]
zip_int_mon_comb[[i]] <- zip_int_mon_comb[[i]][
(chunk_breaks[i]+1):chunk_breaks[i+1],]
}
# combine reults into one complete matrix
zip_int       <- do.call(rbind,zip_int_comb)
zip_int_mon   <- do.call(rbind,zip_int_mon_comb)
# do the same for rmse and number of monitors
rmse_comb   <- clusterEvalQ(cl, rmse)
rmse_n_comb <- clusterEvalQ(cl, rmse_n)
for(i in 1:length(rmse_comb)){
rmse_comb[[i]]   <- rmse_comb[[i]][
(chunk_breaks[i]+1):chunk_breaks[i+1]]
rmse_n_comb[[i]] <- rmse_n_comb[[i]][
(chunk_breaks[i]+1):chunk_breaks[i+1]]
}
rmse   <- unlist(rmse_comb)
rmse_n <- unlist(rmse_n_comb)
########### create data frame and export ###########
# make a data frame to write out
zip_int_df <- data.frame(zip_int)
# assign column names as zip codes and row names as dates
colnames(zip_int_df) <- zip@data$ZCTA5CE10
rownames(zip_int_df) <- datez
# extract coordinates for the centroid of each county
x_coords <- sapply(1:nrow(zip), function(x) gCentroid(zip[x,])@coords[1])
y_coords <- sapply(1:nrow(zip), function(x) gCentroid(zip[x,])@coords[2])
# assign to data frame
zip_int_df[nrow(zip_int_df)+1,] <- x_coords
zip_int_df[nrow(zip_int_df)+1,] <- y_coords
# note the MSA for each zip code
which_msa <- c()
for(i in 1:ncol(zip_int_df)){
# find which MSA the zip centroid falls within
name_msa <- which(sapply(1:nrow(msa), function(x)
gIntersects(msa[x,], gCentroid(zip[i,]) )))
if(length(name_msa) != 0){ # if it falls within an MSA
# note the name of the MSA
which_msa[i] <-  as.character(msa@data$NAME[name_msa])
}
}
# add to data frame
zip_int_df[nrow(zip_int_df)+1,] <- which_msa
# add number of pixels in each zip code
zip_int_df[nrow(zip_int_df)+1,] <- zip_int_mon[1,]
# edit the row and column names to include the coord additions
rownames(zip_int_df) <- c(rownames(zip_int_df)[1:(nrow(zip_int_df)-4)],
"x_coord", "y_coord", "MSA", "n_pixels")
# reorder so coordinates are at the top
zip_int_df <- zip_int_df[c((nrow(zip_int_df)-3):(nrow(zip_int_df)),
1:(nrow(zip_int_df)-4)), ]
# add RMSE for each day
zip_int_df[,ncol(zip_int_df)+1] <- c(rep(NA,4),rmse)
# add number of monitors for each day
zip_int_df[,ncol(zip_int_df)+1] <- c(rep(NA,4),rmse_n)
# reorder so RMSE and monitor count is at the left
zip_int_df <- zip_int_df[,c((ncol(zip_int_df)-1):(ncol(zip_int_df)),
1:(ncol(zip_int_df)-2)) ]
# add names for RMSE and monitor count columns
colnames(zip_int_df) <- c("RMSE", "monitors",
colnames(zip_int_df)[3:ncol(zip_int_df)])
write.csv(zip_int_df, "IDW_rmse_cpp.csv" )
View(zip_int_df)
zip_int_df[5,]
summary(zip_int_df[5,])
c(zip_int_df[5,])
unlist(zip_int_df[5,])
summary(unlist(zip_int_df[5,]))
h = 1891
h = 1
# get pm2.5 values at available monitors
vals_h <- vals[,h][!is.na(vals[,h])]
vals_h
# get coordinates of avaiable monitors
pm_x <- pm2.5_sites$lon_utm[!is.na(vals[,h])]
pm_y <- pm2.5_sites$lat_utm[!is.na(vals[,h])]
int <- Daily_IDW(ras_x = ras_x, ras_y = ras_y,
pm_x = pm_x, pm_y = pm_y,
vals = vals_h,
power = 2.0)
int
plot_int <- msk # create copy of msk to make new raster
plot_int@data@values[!is.na(plot_int@data@values)] <- int
par(mar=c(0,0,0,0)) # no margins
cuts = seq(0,40,1) #set breaks and make pallete
pal <- colorRampPalette(c("darkgreen","yellow","red"))
plot(plot_int, breaks=cuts, col = pal(length(cuts)))
points(pm_x, pm_y, lwd = 2) # add monitor locations
text(100000,3100000,  datez[h], cex = 1.5 ) # add date
zip_means <- c() # vector for mean pm2.5 values
zip_mons  <- c() # vector for number of pixels
i = 1891
plot_int@data@values[which(msk@data@values == i)]
zip@data$ZCTA5CE10[i]
View(zip@data)
View(zip_int)
View(zip_int_df)
i = 39
zip@data$ZCTA5CE10[i]
names(zip_int_df)[i]
zip@data$ZCTA5CE10[i-2]
i = 37
names(zip_int_df)[i]
zip@data$ZCTA5CE10[i]
plot_int@data@values[which(msk@data@values == i)]
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
length(zip_vals)
length(zip_vals) == 0
length(zip_vals) != 0
gCentroid(zip[i,])
extract(plot_int, gCentroid(zip[i,]))
zip_int_df(ncol(zip_int_df)-11)
zip_int_df[ncol(zip_int_df)-11]
zip_int_df[ncol(zip_int_df)-10]
ncol(zip_int_df)-10
ncol(zip_int_df)-10-2
i = 972
plot_int@data@values[which(msk@data@values == i)]
zip_vals <- plot_int@data@values[which(msk@data@values == i)]
extract(plot_int, gCentroid(zip[i,]))
gCentroid(zip[i,])
plot_int@data@values[which(msk@data@values == i)]
library(IDW)
RMSE
?RMSE
library(IDW)
?RMSE
?IDW
?IDW
library(IDW)
?run_IDW
install.packages("Rtools")
install.packages(Rtools)
writeLines(?)
?writelines
?writeLines
setwd("~/")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
Sys.which("make")
require(rtools)
